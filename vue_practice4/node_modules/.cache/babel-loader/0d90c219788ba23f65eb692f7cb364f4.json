{"remainingRequest":"C:\\Users\\MSI\\test\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\MSI\\test\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\MSI\\test\\node_modules\\vue-loader-v16\\dist\\index.js??ref--0-1!C:\\Users\\MSI\\test\\src\\views\\Home.vue?vue&type=script&lang=js","dependencies":[{"path":"C:\\Users\\MSI\\test\\src\\views\\Home.vue","mtime":1626417550920},{"path":"C:\\Users\\MSI\\test\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\MSI\\test\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\MSI\\test\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\MSI\\test\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1624994108000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:ZXhwb3J0IGRlZmF1bHQgewogIC8vIGRhdGEgaGFuZGxpbmfsnbQg66ek7JqwIOykkeyalAogIC8vIOyasOumrOqwgCDsm5DtlZjripTrjIDroZwgY29udHJvbCDtlZjquLDsnITtlbQg6rCc67Cc7J2EIO2VmOuKlCDqsoPsnbTri6QKICAvLyBkYXRh652864qUIOuplOyGjOuTnCDsoJXsnZggLT4gcmV0dXJuIDogY29udHJvbO2VmOqzoOyLtuydgCBkYXRhIOyeheugpQogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICB0aXRsZTogIuqwnOuwnOyekOydmCDtkojqsqkiLAogICAgICB0aXRsZTI6ICJTZW91bCIsCiAgICAgIGlucHV0MTogImFiYyIsCiAgICAgIC8vIGRhdGHqsIAg67Cw7Je0LCBzZWxlY3QgYm947JeQ7IScIOumrOyKpO2KuOulvCDrv4zroKTslbztlaAg65WMIOuztOyekAogICAgICAvLyDsnbTroIfqsowg66as7Iqk7Yq46rCAIOyeiOuLpOqzoCDqsIDsoJUKICAgICAgb3B0aW9uczogW3sKICAgICAgICB2OiAiUyIsCiAgICAgICAgdDogIlNlb3VsIgogICAgICB9LCB7CiAgICAgICAgdjogIkoiLAogICAgICAgIHQ6ICJKZWp1IgogICAgICB9LCB7CiAgICAgICAgdjogIkIiLAogICAgICAgIHQ6ICJCdXNhbiIKICAgICAgfV0sCiAgICAgIC8vIHNlbGVjdCBib3jsnZggZGVmYXVsdCDqsJLsnbQg7KCc7KO866GcIOuQmOyWtOyeiOydjAogICAgICByZWdpb246ICJKIiwKICAgICAgLy8gdHJ1ZeyduCDqsr3smrDsl5Drp4wgdGFibGXsnYQg67O07Jes7KO86rOgIOyLtuydhCDrloQKICAgICAgdGFibGVTaG93OiBmYWxzZQogICAgfTsKICB9LAogIC8vIOunjOyVvSBpbnB1dDHsl5Ag67OA6rK97J20IOydvOyWtOuCmOuptCwg67CU66GcIOy6kOy5mO2VtOyEnCDslYwg7IiYIOyeiOydjAogIC8vIHVzZXLsl5DqsowgYWN0aW9u7J2EIOuwm+yngOyViuqzoCDtlITroZzqt7jrnqgg64K07JeQ7IScIOuzgOqyveyCrO2VreydtCDsg53quLgg65WMLCDrsJTroZwg7ZmV7J24IOqwgOuKpQogIC8v642w7J207YSw6rCAIOuzgOqyve2VoCDrlYwg66eI64ukIGNvbnNvbGXroZwg7LCN7Z6YCiAgLy8g7Yq57KCVIOuNsOydtO2EsOulvCDtla3sg4Eg66qo64uI7YSw66eB7J2EIO2VoCDrlYwsIOyekOyjvCDsgqzsmqkKICB3YXRjaDogewogICAgaW5wdXQxOiBmdW5jdGlvbiBpbnB1dDEoKSB7CiAgICAgIGNvbnNvbGUubG9nKHRoaXMuaW5wdXQxKTsKICAgIH0KICB9LAogIC8vIHZ1ZeuKlCDrqqjrk6AgbWV0aG9k66W8IOydtOugh+qyjCDsoJXsnZgKICAvLyDrjbDsnbTthLDsnZgg67OA7IiY66qF66eMIOy2lOqwgO2VmOuptCDslYjrkKguIHRoaXPrnbzripQg6rCd7LK0IOy2lOqwgCDtlYTsmpQKICAvLyDsnbTroIfqsowgZ2V0IHNldOycvOuhnCDrjbDsnbTthLAgY29udHJvbCDtlZjripTrjbAg7J217IiZ7ZW07KeA66m0IOuNsOydtO2EsCBjb250cm9sIOunpOyasCDsiazsm4zsp5AKICBtZXRob2RzOiB7CiAgICBnZXREYXRhOiBmdW5jdGlvbiBnZXREYXRhKCkgewogICAgICBhbGVydCh0aGlzLmlucHV0MSk7CiAgICB9LAogICAgc2V0RGF0YTogZnVuY3Rpb24gc2V0RGF0YSgpIHsKICAgICAgdGhpcy5pbnB1dDEgPSAiMTIzNDUiOwogICAgfSwKICAgIGNoYW5nZVJlZ2lvbjogZnVuY3Rpb24gY2hhbmdlUmVnaW9uKCkgewogICAgICBhbGVydCh0aGlzLnJlZ2lvbik7CiAgICB9CiAgfSwKICAvLyBsaWZlIGN5Y2xlCiAgLy8g7ZmI7Y6Y7J207KeAIEYxMiAtPiBjb25zb2xlIOywveyXkOyEnCDtmZXsnbgKICAvLyBkYXRh6rCAIOuwlOuAjOuptCBiZWZvcmVVcGRhdGUgLT4gdXBkYXRlZCDsi6TtlonrkKggPT4g7J6s656c642U66eBIOuQmOuKlCDqsoMhCiAgYmVmb3JlQ3JlYXRlOiBmdW5jdGlvbiBiZWZvcmVDcmVhdGUoKSB7CiAgICBjb25zb2xlLmxvZygnYmVmb3JlQ3JlYXRlJyk7CiAgfSwKICBjcmVhdGVkOiBmdW5jdGlvbiBjcmVhdGVkKCkgewogICAgY29uc29sZS5sb2coJ2NyZWF0ZWQnKTsKICB9LAogIGJlZm9yZU1vdW50OiBmdW5jdGlvbiBiZWZvcmVNb3VudCgpIHsKICAgIGNvbnNvbGUubG9nKCdiZWZvcmVNb3VudCcpOwogIH0sCiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCgpIHsKICAgIGNvbnNvbGUubG9nKCdtb3VudGVkJyk7CiAgfSwKICBiZWZvcmVVcGRhdGU6IGZ1bmN0aW9uIGJlZm9yZVVwZGF0ZSgpIHsKICAgIGNvbnNvbGUubG9nKCdiZWZvcmVVcGRhdGUnKTsKICB9LAogIHVwZGF0ZWQ6IGZ1bmN0aW9uIHVwZGF0ZWQoKSB7CiAgICBjb25zb2xlLmxvZygndXBkYXRlZCcpOwogIH0sCiAgYmVmb3JlVW5tb3VudDogZnVuY3Rpb24gYmVmb3JlVW5tb3VudCgpIHsKICAgIGNvbnNvbGUubG9nKCdiZWZvcmVEZXN0cm95Jyk7CiAgfSwKICB1bm1vdW50ZWQ6IGZ1bmN0aW9uIHVubW91bnRlZCgpIHsKICAgIGNvbnNvbGUubG9nKCdkZXN0cm95ZWQnKTsKICB9IC8vIGJlZm9yZURlc3Ryb3kgLT4gYmVmb3JlVW5tb3VudAoKfTs="},{"version":3,"sources":["C:\\Users\\MSI\\test\\src\\views\\Home.vue"],"names":[],"mappings":"AAoCA,eAAe;AAEX;AACA;AACA;AACA,EAAA,IALW,kBAKJ;AACH,WAAO;AACH,MAAA,KAAK,EAAE,SADJ;AAEH,MAAA,MAAM,EAAE,OAFL;AAGH,MAAA,MAAM,EAAE,KAHL;AAIH;AACA;AACA,MAAA,OAAO,EAAE,CACL;AAAC,QAAA,CAAC,EAAE,GAAJ;AAAS,QAAA,CAAC,EAAC;AAAX,OADK,EAEL;AAAC,QAAA,CAAC,EAAE,GAAJ;AAAS,QAAA,CAAC,EAAC;AAAX,OAFK,EAGL;AAAC,QAAA,CAAC,EAAE,GAAJ;AAAS,QAAA,CAAC,EAAC;AAAX,OAHK,CANN;AAWH;AACA,MAAA,MAAM,EAAE,GAZL;AAaH;AACA,MAAA,SAAS,EAAE;AAdR,KAAP;AAgBH,GAtBU;AAuBX;AACA;AACA;AACA;AACA,EAAA,KAAK,EAAE;AACH,IAAA,MADG,oBACK;AACJ,MAAA,OAAO,CAAC,GAAR,CAAY,KAAK,MAAjB;AACJ;AAHG,GA3BI;AAgCX;AACA;AACA;AACA,EAAA,OAAO,EAAE;AACL,IAAA,OADK,qBACK;AACN,MAAA,KAAK,CAAC,KAAK,MAAN,CAAL;AACH,KAHI;AAIL,IAAA,OAJK,qBAIK;AACN,WAAK,MAAL,GAAc,OAAd;AACH,KANI;AAOL,IAAA,YAPK,0BAOS;AACV,MAAA,KAAK,CAAC,KAAK,MAAN,CAAL;AACH;AATI,GAnCE;AA8CX;AACA;AACA;AACA,EAAA,YAjDW,0BAiDG;AACV,IAAA,OAAO,CAAC,GAAR,CAAY,cAAZ;AACH,GAnDU;AAoDX,EAAA,OApDW,qBAoDD;AACN,IAAA,OAAO,CAAC,GAAR,CAAY,SAAZ;AACH,GAtDU;AAuDX,EAAA,WAvDW,yBAuDE;AACT,IAAA,OAAO,CAAC,GAAR,CAAY,aAAZ;AACH,GAzDU;AA0DX,EAAA,OA1DW,qBA0DD;AACN,IAAA,OAAO,CAAC,GAAR,CAAY,SAAZ;AACH,GA5DU;AA6DX,EAAA,YA7DW,0BA6DG;AACV,IAAA,OAAO,CAAC,GAAR,CAAY,cAAZ;AACH,GA/DU;AAgEX,EAAA,OAhEW,qBAgEF;AACL,IAAA,OAAO,CAAC,GAAR,CAAY,SAAZ;AACH,GAlEU;AAmEX,EAAA,aAnEW,2BAmEK;AACZ,IAAA,OAAO,CAAC,GAAR,CAAY,eAAZ;AACH,GArEU;AAsEX,EAAA,SAtEW,uBAsEC;AACR,IAAA,OAAO,CAAC,GAAR,CAAY,WAAZ;AACJ,GAxEW,CAyEX;;AAzEW,CAAf","sourcesContent":["<template>\r\n<!-- binding은 v-model, event는 @click @change, \r\n멀티데이터 v-for, 조건에 따라 랜더링 여부 결정 v-if -->\r\n    <div>\r\n        <h1>welcome to {{title}}!</h1>\r\n        <!-- 사용자가 입력한 데이터 받아올 수 있어야 함 -->\r\n        <!-- vue는 value 대신 v-model이란 것 안에 data를 바인딩하고 처리 가능 -->\r\n        <input type=\"text\" v-model=\"input1\" />\r\n\r\n        <!-- vue에서는 onclick 대신 @click으로 바인딩을 함 (method 호출)-->\r\n        <!-- 또한 vue.js는 1 way가 아닌 2 way 바인딩을 지원함. 이를 보이기 위해 button 추가함 -->\r\n        <button type=\"button\" @click=\"getData\">Get</button>\r\n        <button type=\"button\" @click=\"setData\">Set</button>\r\n\r\n        <!-- select box -->\r\n        <!-- 배열형태는 ㅍv-for를 이용해서 option이란 data에 접근해서 \r\n        하나씩 data와 insex 가져올 수 있다-->\r\n        <select class=\"form-control\" v-model=\"region\" @change=\"changeRegion\">\r\n            <!-- key를 무조건 넣어주어야 함\r\n            배열로 돌아가므로 유일한 값(index)으로 key 설정 -->\r\n            <!-- :value -> value에 v값이 할당이 됨 -->\r\n            <!-- :을 쓰면 데이터 변수에 바로 접근 가능 -->\r\n            <option :key=\"i\" :value=\"d.v\" v-for=\"(d, i) in options\">{{d.t}}</option>\r\n        </select>\r\n\r\n        <!-- table도 동일 -->\r\n        <!-- tr: 행, td: 열 -->\r\n        <table class=\"table table-bordered\" v-if=\"tableShow\">\r\n            <tr :key=\"i\" v-for=\"(d, i) in options\"></tr>\r\n                <td>{{d.v}}</td>\r\n                <td>{{d.t}}</td>\r\n        </table>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    \r\n    // data handling이 매우 중요\r\n    // 우리가 원하는대로 control 하기위해 개발을 하는 것이다\r\n    // data라는 메소드 정의 -> return : control하고싶은 data 입력\r\n    data() {\r\n        return {\r\n            title: \"개발자의 품격\",\r\n            title2: \"Seoul\",\r\n            input1: \"abc\",\r\n            // data가 배열, select box에서 리스트를 뿌려야할 때 보자\r\n            // 이렇게 리스트가 있다고 가정\r\n            options: [\r\n                {v: \"S\", t:\"Seoul\"},\r\n                {v: \"J\", t:\"Jeju\"},\r\n                {v: \"B\", t:\"Busan\"},\r\n            ],\r\n            // select box의 default 값이 제주로 되어있음\r\n            region: \"J\",\r\n            // true인 경우에만 table을 보여주고 싶을 떄\r\n            tableShow: false,\r\n        };\r\n    },\r\n    // 만약 input1에 변경이 일어나면, 바로 캐치해서 알 수 있음\r\n    // user에게 action을 받지않고 프로그램 내에서 변경사항이 생길 때, 바로 확인 가능\r\n    //데이터가 변경할 때 마다 console로 찍힘\r\n    // 특정 데이터를 항상 모니터링을 할 때, 자주 사용\r\n    watch: {\r\n        input1(){\r\n            console.log(this.input1);\r\n        }\r\n    },\r\n    // vue는 모든 method를 이렇게 정의\r\n    // 데이터의 변수명만 추가하면 안됨. this라는 객체 추가 필요\r\n    // 이렇게 get set으로 데이터 control 하는데 익숙해지면 데이터 control 매우 쉬워짐\r\n    methods: {\r\n        getData() {\r\n            alert(this.input1)\r\n        },\r\n        setData() {\r\n            this.input1 = \"12345\";\r\n        },\r\n        changeRegion(){\r\n            alert(this.region);\r\n        },\r\n    },\r\n    // life cycle\r\n    // 홈페이지 F12 -> console 창에서 확인\r\n    // data가 바뀌면 beforeUpdate -> updated 실행됨 => 재랜더링 되는 것!\r\n    beforeCreate(){\r\n        console.log('beforeCreate')\r\n    },\r\n    created() {\r\n        console.log('created')\r\n    },\r\n    beforeMount(){\r\n        console.log('beforeMount')\r\n    },\r\n    mounted() {\r\n        console.log('mounted')\r\n    },\r\n    beforeUpdate(){\r\n        console.log('beforeUpdate')\r\n    },\r\n    updated(){\r\n        console.log('updated')\r\n    },\r\n    beforeUnmount() {\r\n        console.log('beforeDestroy')\r\n    },\r\n    unmounted() {\r\n        console.log('destroyed')\r\n    }\r\n    // beforeDestroy -> beforeUnmount\r\n};\r\n</script>"],"sourceRoot":""}]}